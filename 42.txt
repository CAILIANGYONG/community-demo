import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist =input_data.read_data_sets("MNIST_data",one_hot=True)
batch_size=100
n_batch = mnist.train.num_examples
x=tf.placeholder(tf.float32,[None,784])
y=tf.placeholder(tf.float32,[None,10])
keep_prob=tf.placeholder(tf.float32)

w1=tf.Variable(tf.truncated_normal([784,16],stddev=0.1))
b1=tf.Variable(tf.zeros([16])+0.1)
l1=tf.nn.tanh(tf.matmul(x,w1)+b1)
l1_drop=tf.nn.dropout(l1,keep_prob)

w2=tf.Variable(tf.truncated_normal([16,16],stddev=0.1))
b2=tf.Variable(tf.zeros([16])+0.1)
l2=tf.nn.tanh(tf.matmul(l1_drop,w2)+b2)
l2_drop=tf.nn.dropout(l2,keep_prob)

w3=tf.Variable(tf.truncated_normal([16,16],stddev=0.1))
b3=tf.Variable(tf.zeros([16])+0.1)
l3=tf.nn.tanh(tf.matmul(l2_drop,w3)+b3)
l3_drop=tf.nn.dropout(l3,keep_prob)

w4=tf.Variable(tf.truncated_normal([16,10],stddev=0.1))
b4=tf.Variable(tf.zeros([10])+0.1)

prediction=tf.nn.softmax(tf.matmul(l3_drop,w4)+b4)
#loss =tf.reduce_mean(tf.square(y-prediction))
loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))

#train_step=tf.train.GradientDescentOptimizer(0.001).minimize(loss)
train_step=tf.train.AdamOptimizer(0.001).minimize(loss)
init=tf.global_variables_initializer()
corrent_prediction = tf.equal(tf.argmax(y,1),tf.argmax(prediction,1))
accuracy =tf.reduce_mean(tf.cast(corrent_prediction,tf.float32))
with tf.Session()as sess:
#     with tf.device("/gpu:0"):
    sess.run(init)
    for epoch in range(4):
        for batch in range(n_batch):
            batch_xs,batch_ys=mnist.train.next_batch(batch_size)
            sess.run(train_step,feed_dict={x:batch_xs,y:batch_ys,keep_prob:1.0})
        test_acc=sess.run(accuracy,feed_dict={x:mnist.test.images,y:mnist.test.labels,keep_prob:1.0})
        train_acc=sess.run(accuracy,feed_dict={x:mnist.train.images,y:mnist.train.labels,keep_prob:1.0})
        print("iter"+str(epoch)+"ï¼Œtesting accuracy"+str(test_acc)+",train accuracy"+str(train_acc))