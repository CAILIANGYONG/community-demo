import tensorflow as tf
from tensorflo
mnist =input_data.read_data_sets("MNIST_data",one_hot=True)
batch_size=100
n_batch = mnist.train.num_examples
def variable_summaries(var):
    with tf.name_scope('summaries'):
        mean=tf.reduce_mean(var)
        tf.summary.scalar('mean',mean)
        with tf.name_scope('stddev'):
            stddev=tf.sqrt(tf.reduce_mean(tf.square(var-mean)))
        tf.summary.scalar('stddev',stddev)
        tf.summary.scalar('max',tf.reduce_max(var))
        tf.summary.scalar('min',tf.reduce_min(var))
        tf.summary.histogram('histogram',var)
with tf.name_scope('input'):
    x=tf.placeholder(tf.float32,[None,784],name='x-input')
    y=tf.placeholder(tf.float32,[None,10],name='y-input')
with tf.name_scope('layer'):
    with tf.name_scope('wights'):
        w = tf.Variable(tf.zeros([784,10]),name='w')
        variable_summaries(w)
    with tf.name_scope('biases'):
        b=tf.Variable(tf.zeros([10]),name='b')
        variable_summaries(b)
    with tf.name_scope('wx_plus'): 
        wx_plus=tf.matmul(x,w)+b
    with tf.name_scope('prediction'):
        prediction=tf.nn.softmax(wx_plus)
#loss =tf.reduce_mean(tf.square(y-prediction))
with tf.name_scope('loss'):
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))
    tf.summary.scalar('loss',loss)
with tf.name_scope('train'):
    train_step=tf.train.GradientDescentOptimizer(0.2).minimize(loss)
init=tf.global_variables_initializer()
with tf.name_scope('accuracy'):
    with tf.name_scope('corrent_prediction'): 
        corrent_prediction = tf.equal(tf.argmax(y,1),tf.argmax(prediction,1))
    with tf.name_scope('accuracy'):      
        accuracy =tf.reduce_mean(tf.cast(corrent_prediction,tf.float32))
        tf.summary.scalar('accuracy',accuracy)
merged=tf.summary.merge_all()
with tf.Session()as sess:
    sess.run(init)
    #writer=tf.summary.FileWriter('logs/',sess.graph)

    for epoch in range(10):
        for batch in range(n_batch):
            batch_xs,batch_ys=mnist.train.next_batch(batch_size)
            summary,_ = sess.run([merged,train_step],feed_dict={x:batch_xs,y:batch_ys})
        #writer.add_summary(summary,epoch)
        acc=sess.run(accuracy,feed_dict={x:mnist.test.images,y:mnist.test.labels})
        print("iter"+str(epoch)+"testing accuracy"+str(acc))w.examples.tutorials.mnist import input_data